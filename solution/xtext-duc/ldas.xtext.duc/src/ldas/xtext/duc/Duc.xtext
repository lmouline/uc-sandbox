grammar ldas.xtext.Duc with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

//import "http://www.xtext.ldas/Duc"
import "http://www.eclipse.org/xtext/xbase/Xtype"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

generate duc "http://www.xtext.ldas/Duc"

File:
	'package' package=QualifiedName
	importSection=XImportSection?
	(statements += Statement)*
;

Statement:
	Class | Function
;

Function:
	'def' name=ID '(' (parameters+=FunctionParameter (',' (parameters+=FunctionParameter)*)? )? ')' (':' returnType=JvmTypeReference)? '{'
		(members+=XExpressionOrVarDeclaration)*
	'}'
;

FunctionParameter:
	paramName=ID ':' paramType=JvmTypeReference
;

Class:
	'class' name=ID '{'
		(properties+=Property)*
	'}'
;

Property:
	{Atribute} att=Attribute (Uncertainty)?
	|
	{Relation} rel=Relation (Uncertainty)?
;

Attribute:
	( 'att' name=ID ':' typeAtt=JvmTypeReference ('=' init=(XExpression))?)
	|
	( 'const' name=ID ':' typeAtt=JvmTypeReference '=' init=(XExpression))
;

InitComplex returns xbase::XExpression:
	{InitComplex} (type=UType '(' (parameters+=FunctionParameter (',' (parameters+=FunctionParameter)*)? )? ')')
;

Relation:
	'rel' name=ID ':' typeRel=[Class] ('[' min=INT '..' (maxInt=(INT) | max='*') ']')?
;

fragment Uncertainty:
	('{'
			(metaAttributes+=Attribute)*

			('derived' ('(' (parameters+=FunctionParameter ',' (parameters+=FunctionParameter)*)? ')')? (derivationComputation=XBlockExpression| '=' derivatoinFunction=[Function]) )?
			('profile' ('(' (parameters+=FunctionParameter ',' (parameters+=FunctionParameter)*)? ')')? (profileComputation=XBlockExpression| '=' profileFunction=[Function]))?
			('uncertainty'  ('(' (parameters+=FunctionParameter ',' (parameters+=FunctionParameter)*)? ')')? ":" type=JvmTypeReference (ucComputation=XBlockExpression| '=' ucFunction=[Function]))?

		'}')
;

@Override 
JvmTypeReference:
	super | UType
;

UType:
//	{Type} ('double' | 'int' | 'string' | 'boolean' | 'long' |
//	      'char' | 'byte' | 'float' |  'short'
//	      )
//	      |
//	      ComplexType
	{Type} ('Gaussian' | 'Bernouilli')
;

//ComplexType:
//	{ComplexType} ('Gaussian' | 'Bernouilli')
//;
