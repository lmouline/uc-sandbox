package simple.boolean

class Building {
    Room rooms[0..*]
    Bernoulli<boolean> heatingSystemOn

    /**
    * An example of binary operations (AND , OR) over uncertain types
    **/
    op Bernoulli<boolean> heatingWithOpenWindow() {
        Bernoulli<boolean> oneWindowOpen = false // implicit conversion to Bernoulli(false, X)
        for(Room r: rooms) {

            /**
                The confidence is related to the value of the overall expression and not only one variable
                Here, the plain English text expressed by the below if condition is: if r.windowOpen is equal to true with
                a confidence of at least 80%

                Over ways to write the same condition are:
                    - if((r.windowOpen == true)[0.8])
                    - if((r.windowOpen == false)[0.2])
                    - if((!r.windowOpen == true)[0.2])
                    - if(!r.windowOpen[0.2])
            **/
            if(r.windowOpen[0.8]) {
                oneWindowOpen = oneWindowOpen || r.windowOpen;
                /**
                    boolean oneWindowOpen = oneWindowOpen || r.windowOpen
                    Semantic:
                    boolean oneWindowOpen = oneWindowOpen[highest] || r.windowOpen[highest]
                **/
            }
        }
        return self.heatingSystemOn && oneWindowOpen;
    }

     op Bernoulli<boolean> heatingWithOpenWindowAndSomeone() {
        for(Room r: rooms) {
            if(r instanceOf Office) {
                /*
                    Lets have:
                    Bernoulli<boolean> b1 = r.windowOpen && r.someonePresent && heatingSystemOn
                    Bernoulli<boolean> b2 = r.windowOpen[0.8] && r.someonePresent[0.9] && heatingSystemOn[0.9]

                    b1 and b2 are different.

                    Semantic:
                        Bernoulli<boolean> b1 = {
                            value = r.windowOpen.value && r.someonePresent.value && heatingSystemOn.value
                            uncertainty = r.windowOpen.uncertainty + r.someonePresent.uncertainty + heatingSystemOn.uncertainty
                        }

                        Bernoulli<boolean> b2 = {
                            value = r.windowOpen[0.8] && r.someonePresent.value[0.9] && heatingSystemOn.value[0.9]
                            uncertainty = 1
                        }

                */
                Bernoulli<boolean> riseAlarm = r.windowOpen && r.someonePresent && heatingSystemOn
                if(riseAlarm[0.7]) {
                    sendEmail(r.employees)
                }

                /*
                    Other possibility:
                    boolean riseAlarm = r.windowOpen[0.8] && r.someonePresent[0.9] && heatingSystemOn[0.9]

                    if(riseAlarm) {
                        sendEmail(r.employees)
                    }
                */
            }
        }
     }
}

abstract class Room {
    /**
        Other ways to write the line (currently, may change):
            - Bernoulli<boolean> someonePresent = Bernoulli(true, 0.95)
            - Bernoulli<boolean> someonePresent {
                  value = true
                  uncertainty = 0.95
              }
            - Bernoulli<boolean> someonePresent {
                  self.value = true
                  self.uncertainty = 0.95
              }
             - Bernoulli<boolean> someonePresent {
                  value = true
                  uncertainty = Bernoulli(0.95)
              }
    **/
    Bernoulli<boolean> someonePresent = (true, 0.95)

    Bernoulli<boolean> windowOpen = (false, 0.95)
}

class Office extends Room {
    Employee employees[0..*]

}
class PrinterRoom extends Room {}

class Employee {
    String email
}







