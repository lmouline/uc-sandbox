package simple.boolean

class Building {
    Room rooms[0..*]
    Bernoulli<boolean> heatingSystemOn

    op Bernoulli<boolean> heatingWithOpenWindow() {
        Bernoulli<boolean> oneWindowOpen = false // implicit conversion to Bernoulli(false, 1)
        for(Room r: rooms) {
            if(r.windowOpen[0.8]) { // <=> (r.windowOpen == true)[0.8] -> r.windowOpen == true with 0.8 confidence
          //opposite: if(!r.windowOpen[0.2]) <=> (!r.windowOpen == true)[0.2] <=> (r.windowOpen == false)[0.2] -> r.windowOpen == false with 0.2 confidence
                oneWindowOpen = oneWindowOpen || r.windowOpen;
                /**
                    if oneWindowOpen is a boolean, we loose the uncertainty
                **/
            }
        }
        return self.heatingSystemOn && oneWindowOpen;
    }

     op Bernoulli<boolean> heatingWithOpenWindowAndSomeone() {
        for(Room r: rooms) {
            if(r instanceOf Office) {
                Bernoulli<boolean> riseAlarm = r.windowOpen[0.8] && r.someonePresent[0.9] && heatingSystemOn[0.9] //a bit "artificial"
                if(riseAlarm[0.65]) { //0.65 = 0.8 * 0.9 * 0.9
                    sendEmail(r.employees)
                }

                /*
                    riseAlarm is between [0.65, 1]
                    if(riseAlarm[0.9]) {} -> should rise an inconsistency warning
                    if(riseAlarm[0.4]) {} -> should rise an inconsistency warning
                */
            }
        }
     }
}

abstract class Room {
    Bernoulli<boolean> someonePresent
    Bernoulli<boolean> windowOpen


}

class Office extends Room {
    Employee employees[0..*]

}
class PrinterRoom extends Room {}

class Employee {
    String email
}







