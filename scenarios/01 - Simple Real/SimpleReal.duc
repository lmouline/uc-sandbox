package simple.real

class Building {
    Room rooms[0..*]

    op Gaussian<double> avgTemp() {
        Gaussian<double> sum = 0 // implicit conversion to Gaussian(0,X)

        for(Room r: rooms) {
            sum += r.temperature
        }

        return sum / rooms.length
    }

    op Gaussian<double> avgTempWithConfidenceFilter() {
            Gaussian<double> sum = 0 // implicit conversion to Gaussian(0,X)
            int nbValues = 0

            /**
                Alternative using a Stream API like (if the extended language allow this):
                   - rooms.select((r.temperature[0.9] != null )
                            .map(v | sum+=v; nbValues++)
                            .post(nbValues > 0.9*roomsLength)
            **/
            for(Room r: rooms) {
                /**
                    WARNING: Usually double cannot be compared with a null value
                    Either we will be to modify the semantic to allow this or we will need to find a trick like adding an "exists()" method
                **/
                if(r.temperature[0.9] != null) { //there is a value with more than 90% of confidence
                    sum += r.temperature //return the value with the highest confidence
                    nbValues++
                }
            }

            if(nbValues > 0.9 * rooms.length) {
                return sum / nbValues //nbValues implicit conversion to Gaussian(nbValues,X)
            }

            return -273.15 //not possible to compute the value, absolute zero, implicit conversion to Gaussian(-273.15, X)
        }

    op void checkPanicAlarm() {
        Gaussian<double> avgTemp = avgTemp()

        if((avgTemp != -273.15)[0.9]) {
            if((avgTemp < 0)[0.9] || (avgTemp > 35)[0.9]) {
                panicAlarm()
            }
        }

     }
}

class Room {
    /**
        Other ways to define this:
            - Gaussian<double> temperature {
                double precision = 0.6

                uncertainty = (self.value, precision)
            }
    **/
    /**
        Other suggestion:
            - UReal <double> {@precision : 0.6} temperature
            - Gaussian<double> [@std : 0.6] temperature
    **/
    /**
        UReal type comes from the Antonio V. works
    **/
    UReal temperature(precision: 0.6)
}


/**
Meta datatype Gaussian<T> {
    attribute T mean
    attribute double std

    uncertainty = Gaussian(mean, std)
}

Meta datatype UReal extends Gaussian<Real> {
    attribute double precision
    self.std = precision
}
**/
